generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
  ARTIST
}

model User {
  id            String        @id @unique
  email         String        @unique
  firstName     String?
  lastName      String?
  walletBalance Decimal       @default(0.00) @db.Decimal(10, 2)
  role          Role          @default(USER) // ใช้ enum Role
  createdAt     DateTime      @default(now()) @db.Timestamp(6)
  imageUrl      String?
  salesCount    Int           @default(0)
  Artworks      Artwork[]
  Bids          Bid[]
  BlogPosts     Blog[]
  Cart          Cart?
  Comments      Comment[]
  Orders        Order[]
  Transactions  Transaction[]
  History       History[]
  Profile       Profile?
}

model Artwork {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String? // เปลี่ยนเป็น String
  title             String
  description       String?
  categoryId        Int?
  typeId            Int?
  price             Decimal?      @db.Decimal(10, 2)
  auctionStartPrice Decimal?      @db.Decimal(10, 2)
  auctionStartAt    DateTime?     @db.Timestamp(6)
  auctionEndAt      DateTime?     @db.Timestamp(6)
  highestBid        Decimal?      @db.Decimal(10, 2)
  status            ArtworkStatus @default(ACTIVE)
  imageUrl          String
  createdAt         DateTime      @default(now()) @db.Timestamp(6)

  User        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Category    Category?    @relation(fields: [categoryId], references: [id], onUpdate: Restrict)
  ArtworkType ArtworkType? @relation(fields: [typeId], references: [id], onDelete: Restrict)
  Bids        Bid[]
  CartItems   CartItem[]
  OrderItems  OrderItem[]
  History     History[]
}

model ArtworkType {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  Artworks    Artwork[]
}

enum ArtworkStatus {
  ACTIVE
  AUCTION_ENDED
  SOLD
}

model Bid {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  artworkId String   @db.Uuid
  userId    String // เปลี่ยนเป็น String
  amount    Decimal  @db.Decimal(10, 2)
  isWinning Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamp(6)

  Artwork Artwork @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)


}

model History {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String? // เชื่อมกับผู้ใช้งาน
  actionType  ActionType // PURCHASE, BID, หรืออื่น ๆ
  artworkId   String?    @db.Uuid // เชื่อมกับภาพที่เกี่ยวข้อง
  amount      Decimal?   @db.Decimal(10, 2) // ราคาซื้อ/เสนอราคา
  downloadUrl String? // ลิงก์สำหรับดาวน์โหลดไฟล์ภาพ (กรณีเป็นการซื้อภาพ)
  createdAt   DateTime   @default(now()) @db.Timestamp(6)

  User    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Artwork Artwork? @relation(fields: [artworkId], references: [id], onDelete: Cascade)
}

enum ActionType {
  PURCHASE // ซื้อภาพ
  BID // การประมูล
}

model Blog {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  content     String
  publishedAt DateTime? @default(now()) @db.Timestamp(6)
  authorId    String? // เปลี่ยนเป็น String

  User     User?     @relation(fields: [authorId], references: [id], onDelete: Restrict)
  Comments Comment[]
}

model Cart {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String?  @unique // เปลี่ยนเป็น String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)

  User      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  CartItems CartItem[]
}

model CartItem {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cartId    String?  @db.Uuid
  artworkId String?  @db.Uuid
  quantity  Int      @default(1)
  addedAt   DateTime @default(now()) @db.Timestamp(6)

  Cart    Cart?    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  Artwork Artwork? @relation(fields: [artworkId], references: [id], onDelete: Cascade)

  // เพิ่ม unique constraint สำหรับ cartId และ artworkId
  @@unique([cartId, artworkId])
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now()) @db.Timestamp(6)

  Artworks Artwork[]
}

model Comment {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId          String?  @db.Uuid
  userId          String? // เปลี่ยนเป็น String
  content         String
  createdAt       DateTime @default(now()) @db.Timestamp(6)
  parentCommentId String?  @db.Uuid

  User User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  Blog Blog? @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Order {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String? // เปลี่ยนเป็น String
  totalPrice Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now()) @db.Timestamp(6)

  User       User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  OrderItems OrderItem[]
}

model OrderItem {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId   String? @db.Uuid
  artworkId String? @db.Uuid
  price     Decimal @db.Decimal(10, 2)
  quantity  Int     @default(1)

  Order   Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Artwork Artwork? @relation(fields: [artworkId], references: [id], onDelete: Cascade)
}

model Profile {
  id           String   @id // String ID for Clerk
  displayName  String?
  bio          String?
  profileImage String?
  updatedAt    DateTime @default(now()) @db.Timestamp(6)

  User User @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Transaction {
  id              String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String? // เชื่อมกับผู้ใช้งาน
  transactionType TransactionType? // DEPOSIT หรือ WITHDRAWAL
  amount          Decimal            @db.Decimal(10, 2) // จำนวนที่ผู้ใช้ได้รับในวอลเลท
  createdAt       DateTime           @default(now()) @db.Timestamp(6)
  status          TransactionStatus? // PENDING, COMPLETED, FAILED, CANCELLED  

  User User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum TransactionType {
  DEPOSIT // ฝากเงิน
  WITHDRAWAL // ถอนเงิน
}
